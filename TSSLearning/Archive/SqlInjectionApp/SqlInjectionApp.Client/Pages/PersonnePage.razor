@page "/personnes"
@using System.Web
@using SqlInjectionApp.Client.Entities
@using SqlInjectionApp.Client.Proxies

<h1>Liste des personnes</h1>

<p>Filtre : <input type="text" id="zonefiltre" @bind="Filtre" /><button @onclick="Navigate">Rafraîchir liste</button></p>

@if (_personnes == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Nom</th>
        <th>Prénom</th>
        <th>Age</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var personne in _personnes)
      {
        <tr>
          <td>@personne.Nom</td>
          <td>@personne.Prenom</td>
          <td>@personne.Age.ToString()</td>
        </tr>
      }
    </tbody>
  </table>
}

<h1>Ajouter une personne</h1>

<div>
  <EditForm OnSubmit="Creer" Model="_personneEnCreation">
    <div>
      Nom : <input type="text" @bind-value="@_personneEnCreation.Nom" />
    </div>
    <div>
      Prénom : <input type="text" @bind-value="@_personneEnCreation.Prenom" />
    </div>
    <div>
      Age : <input type="text" @bind-value="@_personneEnCreation.Age" />
    </div>
    <button type="submit" class="btn btn-primary">Créer nouvelle demande</button>
  </EditForm>
</div>

@code {

    [Inject]
    public required PersonneClient PersonneClient { get; init; }

    [Inject]
    public required NavigationManager Nav { get; init; }

  private readonly Personne _personneEnCreation = new Personne() { Age = 20 };

  async void Creer()
  {
    try
    {
      await PersonneClient.CreateClientAsync(_personneEnCreation);
    }
    catch
    {
      Console.WriteLine("Problème lors de la création");
    }
    this.StateHasChanged();
  }

  private Personne[]? _personnes;

  private string Filtre { get; set; } = string.Empty;

  void Navigate()
  {
    if (string.IsNullOrWhiteSpace(Filtre))
    {
      Nav.NavigateTo("/personnes", forceLoad: true);
      return;
    }

    // Juste pour faire voir le force reload ; normalement, on changerait plutôt les données par un appel d'API réalisé par le client WASM
    Nav.NavigateTo($"/personnes?indicationNom={HttpUtility.UrlEncode(Filtre)}", forceLoad: true);
  }

  protected override async Task OnInitializedAsync()
  {
    string? indicationNom = null;
    var uri = Nav.ToAbsoluteUri(Nav.Uri);
    var valeurs = HttpUtility.ParseQueryString(uri.Query).GetValues("indicationNom");
    indicationNom = valeurs?[0];

    string filtre = indicationNom is null ? string.Empty : "?IndicationNom=" + indicationNom;
    _personnes = await PersonneClient.GetPersonnesAsync(filtre);
    StateHasChanged();
  }
}
