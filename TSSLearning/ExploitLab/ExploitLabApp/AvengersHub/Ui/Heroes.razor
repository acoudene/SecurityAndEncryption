@page "/"
@page "/heroes"
@using ExploitLabApp.AvengersHub
@using ExploitLabApp.AvengersHub.Api
@using ExploitLabApp.IdentityProvider.Api
@using ExploitLabApp.Heroes.Infrastructure
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc

<h1>Heroes</h1>

<div class="mb-3 d-flex">
  <button @onclick="ReloadPage">
    Reload
  </button>
</div>

@if (_heroes is null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="mb-3 d-flex">
    <InputText placeholder="Search by pattern..." @bind-value="SearchPattern" />
    <button type="button" class="btn btn-primary" onclick="@SearchHeroesAsync">Search</button>
  </div>

  <table class="table">
    <thead>
      <tr>
        <th>Name</th>
        <th>FirstName</th>
        <th>Email</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var hero in _heroes)
      {
        <tr>
          <td>@hero.Name</td>
          <td>@hero.FirstName</td>
          <td>@hero.Email</td>
        </tr>
      }
    </tbody>
  </table>

  <h2>Add</h2>

  <div>
    <EditForm OnValidSubmit="CreateAsync" Model="HeroCreation" FormName="HeroCreation">
      <div>
        Name: <InputText @bind-value="HeroCreation.Name" class="form-control" />
      </div>
      <div>
        FirstName: <InputText @bind-value="HeroCreation.FirstName" class="form-control" />
      </div>
      <div>
        Email: <InputText @bind-value="HeroCreation.Email" class="form-control" />
      </div>
      <button type="submit" class="btn btn-primary">Create a new hero</button>
    </EditForm>
  </div>
}

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
  <div class="alert alert-danger d-flex justify-content-between align-items-center mt-3">
    <span>@_errorMessage</span>
    <button class="btn btn-light btn-sm ms-3" @onclick="ReloadPage">
      Reload
    </button>
  </div>
}

@code {

  private string? _errorMessage;

  [Inject]
  public required HeroesProxySafeClient HeroesClient { get; init; }

  [Inject]
  public required NavigationManager Navigation { get; init; }

  private List<HeroReadDto>? _heroes;
  private string? SearchPattern { get; set; }

  [SupplyParameterFromForm]
  private HeroCreationDto HeroCreation { get; set; } = new() { Name = string.Empty, FirstName = string.Empty, Email = string.Empty };

  protected override async Task OnInitializedAsync()
  {
    try
    {
      _heroes = await HeroesClient.SearchAsync();
    }
    catch (Exception ex)
    {
      _errorMessage = $"Error during hero initialization: {ex.Message}";
    }
  }

  protected async Task CreateAsync()
  {
    try
    {
      var response = await HeroesClient.CreateAsync(HeroCreation);
      if (!response.IsSuccessStatusCode)
      {
        var problem = await response.Content.ReadFromJsonAsync<ProblemDetails>();
        _errorMessage = $"Error during hero creation: {problem?.Detail ?? problem?.Status.ToString()}";
        return;
      }

      _heroes = await HeroesClient.SearchAsync();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      _errorMessage = $"Error during hero creation: {ex.Message}";
    }
  }

  protected async Task SearchHeroesAsync()
  {
    try
    {
      _heroes = await HeroesClient.SearchAsync(SearchPattern);
      StateHasChanged();
    }
    catch (Exception ex)
    {
      _errorMessage = $"Error during hero search: {ex.Message}";
    }
  }

  private void ReloadPage()
  {
    // recharge la page courante depuis le serveur
    Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
  }
}
