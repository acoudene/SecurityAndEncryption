using ExploitLabApp.AccountManagement.Api;
using ExploitLabApp.Shared.Api;
using ExploitLabApp.Shared.Infrastructure;
using ExploitLabApp.Shared.Ui.Components;
using ExploitLabApp.Heroes.Application;
using ExploitLabApp.Heroes.Infrastructure;
using Microsoft.AspNetCore.Components;

#region Database prerequisites

string connectionString = $"Data Source=sqlite.db";
var sqliteSeeding = new SqliteSeeding(connectionString);
sqliteSeeding.EnsureDatabases();
sqliteSeeding.Seed();

#endregion

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();

#region Repositories

#if CrossSiteScriptingMode
builder.Services.AddScoped<IHeroesRepository>(sp => new HeroesSqliteSafeRepository(connectionString)); // Safe
#elif SqlInjectionMode
builder.Services.AddScoped<IHeroesRepository>(sp => new HeroesSqliteRepository(connectionString));
#else
builder.Services.AddScoped<IHeroesRepository>(sp => new HeroesSqliteSafeRepository(connectionString)); // Safe
#endif

#endregion

builder.Services.AddScoped<HeroesProxyClient>(serviceProvider =>
{
  var nav = serviceProvider.GetRequiredService<NavigationManager>();
  string? baseUrl = nav?.BaseUri;
  if (string.IsNullOrWhiteSpace(baseUrl))
    throw new InvalidOperationException("Configuration value App:BaseUrl is missing or empty");

  var httpClient = new HttpClient
  {
    BaseAddress = new Uri(new Uri(baseUrl), "/api/heroes/")
  };
  return new HeroesProxyClient(httpClient);
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
  app.UseExceptionHandler("/Error", createScopeForErrors: true);
  // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
  app.UseHsts();
}

app.UseHttpsRedirection();

app.UseAntiforgery();

app.MapStaticAssets();
app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();

#region API Settings

app.MapHeroesEndpoints();

#if CrossSiteScriptingMode
app.MapHeroDetailsEndpoints();
#elif SqlInjectionMode
app.MapHeroDetailsSafeEndpoints(); // Safe
#else
app.MapHeroDetailsSafeEndpoints(); // Safe
#endif

#endregion

app.UseMiddleware<ExceptionHandlingMiddleware>();

app.Run();
