@page "/users"
@inject HttpClient Http
@using System.Net.Http.Json
@using _01_SqlInjectionApp.Dtos

<h1>Gestion des utilisateurs</h1>

<h3>Ajouter un utilisateur</h3>
<input @bind="newUsername" placeholder="Nom d'utilisateur" />
<input @bind="newEmail" placeholder="Email" />
<button @onclick="AddUser">Ajouter</button>
<p>@addResult</p>

<h3>Rechercher des utilisateurs</h3>
<input @bind="searchQuery" placeholder="Recherche" />
<button @onclick="() => Search(true)">Vulnérable</button>
<button @onclick="() => Search(false)">Sécurisé</button>

@if (users != null)
{
  <table>
    <thead>
      <tr>
        <th>Id</th>
        <th>Nom d'utilisateur</th>
        <th>Email</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var u in users)
      {
        <tr>
          <td>@u.Id</td>
          <td>@u.Username</td>
          <td>@u.Email</td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  string newUsername = "";
  string newEmail = "";
  string searchQuery = "";
  string addResult = "";
  List<UserDto>? users;

  async Task AddUser()
  {
    var res = await Http.PostAsJsonAsync("/api/users", new UserCreateDto(Username: newUsername, Email: newEmail));
    addResult = res.IsSuccessStatusCode ? "Utilisateur ajouté" : $"Erreur {res.StatusCode}";
  }

  async Task Search(bool vuln)
  {
    var url = vuln ? "/api/users" : "api/safe/users";
    if (!string.IsNullOrWhiteSpace(searchQuery))
      url += $"?search={Uri.EscapeDataString(searchQuery)}";
    users = await Http.GetFromJsonAsync<List<UserDto>>(url);
  }
}
